openapi: 3.0.3
info:
  title: part1
  version: 1.0.0
  servers:
  - url: http
  description: part1

tags:
  - name: Patients
  - name: Doctors
  - name: Appointments
  - name: Medical Records

paths:
  /patients:
    get:
      tags: [Patients]
      summary: List all patients
      responses:
        '200':
          description: A list of patients
    post:
      tags: [Patients]
      summary: Create a new patient
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Patient'
      responses:
        '201':
          description: Patient created

  /patients/{id}:
    get:
      tags: [Patients]
      summary: Retrieve a specific patient by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Patient details
    put:
      tags: [Patients]
      summary: Update a specific patient by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Patient'
      responses:
        '200':
          description: Patient updated
    delete:
      tags: [Patients]
      summary: Delete a specific patient by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Patient deleted

  /patients/{id}/appointments:
    get:
      tags: [Patients]
      summary: List all appointments for a specific patient
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A list of appointments

  /patients/{id}/medical-records:
    get:
      tags: [Patients]
      summary: List all medical records for a specific patient
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A list of medical records

  /doctors:
    get:
      tags: [Doctors]
      summary: List all doctors
      responses:
        '200':
          description: A list of doctors
    post:
      tags: [Doctors]
      summary: Create a new doctor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Doctor'
      responses:
        '201':
          description: Doctor created

  /doctors/{id}:
    get:
      tags: [Doctors]
      summary: Retrieve a specific doctor by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Doctor details
    put:
      tags: [Doctors]
      summary: Update a specific doctor by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Doctor'
      responses:
        '200':
          description: Doctor updated
    delete:
      tags: [Doctors]
      summary: Delete a specific doctor by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Doctor deleted

  /doctors/{id}/appointments:
    get:
      tags: [Doctors]
      summary: List all appointments for a specific doctor
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A list of appointments

  /appointments:
    get:
      tags: [Appointments]
      summary: List all appointments
      responses:
        '200':
          description: A list of appointments
    post:
      tags: [Appointments]
      summary: Create a new appointment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Appointment'
      responses:
        '201':
          description: Appointment created

  /appointments/{id}:
    get:
      tags: [Appointments]
      summary: Retrieve a specific appointment by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Appointment details
    put:
      tags: [Appointments]
      summary: Update a specific appointment by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Appointment'
      responses:
        '200':
          description: Appointment updated
    delete:
      tags: [Appointments]
      summary: Delete a specific appointment by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Appointment deleted

  /appointments/{id}/medical-record:
    get:
      tags: [Appointments]
      summary: Retrieve the medical record for a specific appointment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Medical record details

  /medical-records:
    post:
      tags: [Medical Records]
      summary: Create a new medical record
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MedicalRecord'
      responses:
        '201':
          description: Medical record created

components:
  schemas:
    Patient:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
        address:
          type: string
    Doctor:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        specialisation:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
    Appointment:
      type: object
      properties:
        id:
          type: integer
        patientId:
          type: integer
        doctorId:
          type: integer
        dateTime:
          type: string
          format: date-time
        reason:
          type: string
    MedicalRecord:
      type: object
      properties:
        id:
          type: integer
        patientId:
          type: integer
        appointmentId:
          type: integer
        diagnosis:
          type: string
        treatment:
          type: string

